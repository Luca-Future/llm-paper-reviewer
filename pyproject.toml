[project]
name = "paper-reviewer-ai"
version = "2.0.0"
description = "A modern AI-powered academic paper analysis tool with clean architecture"
readme = "README.md"
requires-python = ">=3.11"
authors = [
    {name = "Paper Reviewer AI Team", email = "team@paper-reviewer-ai.com"},
]
maintainers = [
    {name = "Paper Reviewer AI Team", email = "team@paper-reviewer-ai.com"},
]
keywords = ["ai", "academic", "paper-analysis", "nlp", "openai", "pdf"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Text Processing :: Linguistic",
]
dependencies = [
    "click>=8.2.1",
    "langchain-core>=0.3.0",
    "langchain-openai>=0.3.0",
    "openai>=1.0.0",
    "pymupdf>=1.26.4",
    "python-dotenv>=1.1.1",
    "pydantic>=2.0.0",
    "pyyaml>=6.0.0",
    "aiofiles>=24.0.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=8.0.0",
    "pytest-asyncio>=0.24.0",
    "pytest-cov>=5.0.0",
    "black>=24.0.0",
    "flake8>=7.0.0",
    "mypy>=1.10.0",
    "isort>=5.13.0",
    "pre-commit>=3.7.0",
]
test = [
    "pytest>=8.0.0",
    "pytest-asyncio>=0.24.0",
    "pytest-cov>=5.0.0",
    "pytest-mock>=3.14.0",
    "httpx>=0.27.0",
]
docs = [
    "mkdocs>=1.5.0",
    "mkdocs-material>=9.5.0",
    "mkdocs-mermaid2-plugin>=1.0.0",
    "mkdocstrings[python]>=0.25.0",
]

[project.urls]
Homepage = "https://github.com/your-repo/paper-reviewer-ai"
Documentation = "https://paper-reviewer-ai.readthedocs.io"
Repository = "https://github.com/your-repo/paper-reviewer-ai"
Issues = "https://github.com/your-repo/paper-reviewer-ai/issues"
Changelog = "https://github.com/your-repo/paper-reviewer-ai/blob/main/CHANGELOG.md"

[project.scripts]
paper-reviewer = "interfaces.cli.main:cli"
pra = "interfaces.cli.main:cli"

[tool.uv]
dev-dependencies = [
    "pytest>=8.0.0",
    "pytest-asyncio>=0.24.0",
    "pytest-cov>=5.0.0",
    "black>=24.0.0",
    "flake8>=7.0.0",
    "mypy>=1.10.0",
    "isort>=5.13.0",
    "pre-commit>=3.7.0",
    "ruff>=0.5.0",
    "ruff-lsp>=0.0.50",
]

[tool.uv.sources]
# Use specific versions for better reproducibility

[tool.black]
line-length = 88
target-version = ['py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
line_length = 88

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[tool.pytest.ini_options]
minversion = "8.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
asyncio_mode = "auto"
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
]

[tool.coverage.run]
source = ["."]
omit = [
    "tests/*",
    "*/tests/*",
    "*/test_*",
    "setup.py",
    "*/__pycache__/*",
    "*/venv/*",
    "*/.venv/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.ruff]
target-version = "py311"
line-length = 88
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
    "ARG001",  # unused arguments in functions
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "W191",  # indentation contains tabs
    "B904",  # Allow raising exceptions without from e, for HTTPException
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]
"tests/*" = ["ARG001"]

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.sdist]
include = [
    "/src",
    "/tests",
    "/pyproject.toml",
    "/README.md",
    "/LICENSE",
    "/CHANGELOG.md",
]

[tool.hatch.build.targets.wheel]
packages = ["src/paper_reviewer_ai"]
